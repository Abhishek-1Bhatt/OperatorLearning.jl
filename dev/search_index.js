var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = NeuralOperator","category":"page"},{"location":"#NeuralOperator","page":"Home","title":"NeuralOperator","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NeuralOperator.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [NeuralOperator]","category":"page"},{"location":"#NeuralOperator.FourierLayer","page":"Home","title":"NeuralOperator.FourierLayer","text":"FourierLayer(in, out, batch, grid, modes, σ=identity, init=glorotuniform) FourierLayer(Wf::AbstractArray, Wl::AbstractArray, [biasf, bias_l, σ])\n\nCreate a Layer of the Fourier Neural Operator as proposed by Zongyi et al. arXiv: 2010.08895\n\nThe layer does a fourier transform on the last axis (the coeffs) of the input array, filters higher modes out by the weight matrix and transforms the second axis to the specified output dimension such that In x M x N -> Out x M x N. The output though only contains the relevant Fourier modes with the rest padded to zero in the last axis as a result of the filtering.\n\nThe input x should be a 3D tensor of shape (num parameters (in) x num grid points (grid) x batch size (batch)) The output y will be a 3D tensor of shape (out x num grid points (grid) x batch size (batch))\n\nYou can specify biases for the paths as you like, though the convolutional path is originally not intended to perform an affine transformation.\n\nExamples\n\nSay you're considering a 1D diffusion problem on a 64 point grid. The input is comprised of the grid points as well as the IC at this point. The data consists of 200 instances of the solution. So the input takes the dimension 2 x 64 x 200. The output would be the diffused variable at a later time, which makes the output of the form 2 x 200 x 64 as well.\n\n\n\n\n\n","category":"type"},{"location":"#NeuralOperator.cglorot_normal-Tuple{Random.AbstractRNG, Vararg{Any}}","page":"Home","title":"NeuralOperator.cglorot_normal","text":"cglorotnormal([rng=GLOBALRNG], dims...)\n\nA modification of the glorot_normal function provided by Flux to accommodate Complex numbers. This is necessary since the parameters of the global convolution operator in the Fourier Layer generally has complex weights.\n\n\n\n\n\n","category":"method"},{"location":"#NeuralOperator.cglorot_uniform-Tuple{Random.AbstractRNG, Vararg{Any}}","page":"Home","title":"NeuralOperator.cglorot_uniform","text":"cglorotuniform([rng=GLOBALRNG], dims...)\n\nA modification of the glorot_uniform function provided by Flux to accommodate Complex numbers. This is necessary since the parameters of the global convolution operator in the Fourier Layer generally has complex weights.\n\n\n\n\n\n","category":"method"}]
}
